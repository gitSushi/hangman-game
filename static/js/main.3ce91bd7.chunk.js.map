{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WORDS","GALLOWS_SVG","App","props","typedKey","event","state","keys","word","count","userChoice","target","textContent","includes","drawHangman","setState","gameStatus","newGame","randWord","status","hangman","React","createRef","abc","alphabet","idx","Math","floor","random","length","this","replace","char","Array","fill","map","index","String","fromCharCode","split","filter","elt","GALLOWS_PATH","Path2D","current","getContext","stroke","className","style","letterSpacing","show","key","background","feedback","onClick","bind","ref","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ce91bd7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst WORDS = [\n  \"SOURIS\",\n  \"TOMATE\",\n  \"GUITARE\",\n  \"MICROBE\",\n  \"ESCALIER\",\n  \"FRACTION\",\n  \"CHAUSSURE\",\n  \"RICOCHETS\",\n  \"SOCIOLOGIE\",\n  \"HYPNOTISER\",\n  \"AGORAPHOBIE\",\n  \"PHILOSOPHIE\"\n];\nconst GALLOWS_SVG = [\n  \"M30 280 l120 0\",\n  \"M60 280 l0 -260\",\n  \"M40 40 l210 0\",\n  \"M60 85 L120 40\",\n  \"M210 40 l0 30\",\n  \"M185 95 a 25,25 0 1 0 50,0 a 25,25 0 1 0 -50,0\",\n  \"M210 120 l0 85\",\n  \"M170 160 l80 0\",\n  \"M210 205 L175 245\",\n  \"M210 205 L245 245\"\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hangman = React.createRef();\n    this.state = {\n      keys: [],\n      word: this.randWord(),\n      abc: this.alphabet(),\n      status: \"playing\",\n      count: 0\n    };\n  }\n\n  randWord() {\n    const idx = Math.floor(Math.random() * WORDS.length);\n    return WORDS[idx];\n  }\n  show() {\n    let { keys, word } = this.state;\n    return word.replace(/\\w/g, char => (keys.includes(char) ? char : \"_\"));\n  }\n  alphabet() {\n    let abc = new Array(26);\n    // fill the array with a static value in preparation of map since it doesn't work on undefined values : just to avoid a loop\n    abc.fill(0);\n    return abc.map((char, index) => (char = String.fromCharCode(65 + index)));\n  }\n  feedback(char) {\n    const { keys } = this.state;\n    if (keys.includes(char)) {\n      return \"#e2e6ea\";\n    }\n  }\n  gameStatus() {\n    let { word, keys } = this.state;\n    if (\n      word.split(\"\").filter(char => keys.includes(char)).length === word.length\n    ) {\n      this.setState({ status: \"YEAH, YOU WON !!\" });\n    }\n    if (keys.filter(elt => !word.includes(elt)).length > 9) {\n      this.setState({ status: \"SNIF, YOU LOST\" });\n    }\n  }\n  drawHangman(count) {\n    const GALLOWS_PATH = new Path2D(GALLOWS_SVG[count]);\n    const canvas = this.hangman.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.stroke(GALLOWS_PATH);\n  }\n\n  // bound func\n  typedKey = (event) => {\n    let { keys, word, count } = this.state;\n    let userChoice = event.target.textContent;\n    if (!word.includes(userChoice)) {\n      this.drawHangman(count);\n      this.setState({\n        count: count + 1\n      });\n    }\n    this.setState({ keys: [...keys, userChoice] }, this.gameStatus);\n  };\n  newGame = () => {\n    this.setState({\n      keys: [],\n      word: this.randWord(),\n      status: \"playing\",\n      count: 0\n    });\n  };\n\n  render() {\n    let { abc, status, count } = this.state;\n    return (\n      <div className=\"container-fluid text-center\">\n        {/* thought : start with a modal : not for the fainthearted */}\n        <h1>JEU DU PENDU</h1>\n        {status === \"playing\" ? (\n          <div>\n            <div className=\"row justify-content-center\">\n              <h2 style={{ letterSpacing: 10 }}>{this.show()}</h2>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-lg-3 d-flex justify-content-center align-items-center\">\n                {/*column in prep of player 2*/}\n                {count === 9 ? (<p>chance restante : {10 - count}</p>) : (<p>chances restantes : {10 - count}</p>) }\n              </div>\n              <div className=\"col-lg-5 d-flex justify-content-center align-items-center\">\n                <p>\n                  {abc.map((char, idx) => (\n                    <button\n                      key={idx}\n                      className=\"btn btn-light m-1\"\n                      style={{ background: this.feedback(char) }}\n                      onClick={this.typedKey.bind(this)}\n                    >\n                      {char}\n                    </button>\n                  ))}\n                </p>\n              </div>\n              <div className=\"col-lg-4\">\n                <canvas ref={this.hangman} height=\"302\" />\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div>\n            <h3>{status}</h3>\n            <button className=\"d-block mx-auto\" onClick={this.newGame}>\n              New game\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}